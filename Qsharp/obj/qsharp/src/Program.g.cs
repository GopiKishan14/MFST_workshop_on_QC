//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Qsharp\",\"Name\":\"HelloQ\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Qsharp\",\"Name\":\"HelloQ\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Qsharp\",\"Name\":\"MultiGateQ\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":34,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Qsharp\",\"Name\":\"MultiGateQ\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":34,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Qsharp\",\"Name\":\"HalfAdder\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":53,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Qsharp\",\"Name\":\"HalfAdder\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":53,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Qsharp\",\"Name\":\"Deutsch\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":71,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"i\"]},\"Type\":{\"Case\":\"String\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":19},\"Item2\":{\"Line\":1,\"Column\":20}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"String\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Qsharp\",\"Name\":\"Deutsch\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":71,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Qsharp\",\"Name\":\"Deutsch_Jozsa\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":115,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"i\"]},\"Type\":{\"Case\":\"String\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":26}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"String\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Qsharp\",\"Name\":\"Deutsch_Jozsa\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":115,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Qsharp\",\"Name\":\"Simon\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":164,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":16}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Qsharp\",\"Name\":\"Simon\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":164,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":16}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Qsharp\",\"Name\":\"Grover\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":210,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Qsharp\",\"Name\":\"Grover\"},\"Attributes\":[],\"SourceFile\":\"/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs\",\"Position\":{\"Item1\":210,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
#line hidden
namespace Qsharp
{
    [SourceLocation("/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs", OperationFunctor.Body, 11, 35)]
    public partial class HelloQ : Operation<QVoid, QVoid>, ICallable
    {
        public HelloQ(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "HelloQ";
        String ICallable.FullName => "Qsharp.HelloQ";
        public static OperationInfo<QVoid, QVoid> Info => new OperationInfo<QVoid, QVoid>(typeof(HelloQ));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line 12 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
            MicrosoftQuantumIntrinsicMessage.Apply("Hello quantum world!");
#line hidden
            {
#line 13 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                var qubit = Allocate.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 15 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicH.Apply(qubit);
#line 16 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    var result = MicrosoftQuantumIntrinsicM.Apply(qubit);
#line 17 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Measurement is {0}", result));
#line 28 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicReset.Apply(qubit);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(qubit);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<HelloQ, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs", OperationFunctor.Body, 35, 54)]
    public partial class MultiGateQ : Operation<QVoid, QVoid>, ICallable
    {
        public MultiGateQ(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "MultiGateQ";
        String ICallable.FullName => "Qsharp.MultiGateQ";
        public static OperationInfo<QVoid, QVoid> Info => new OperationInfo<QVoid, QVoid>(typeof(MultiGateQ));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> MicrosoftQuantumMeasurementMultiM
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line 36 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
            MicrosoftQuantumIntrinsicMessage.Apply("Hello quantum world!");
#line hidden
            {
#line 38 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                var qubits = Allocate.Apply(10L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 41 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    foreach (var q in qubits)
#line hidden
                    {
#line 43 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicH.Apply(q);
                    }

#line 45 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    var result = (IQArray<Result>)MicrosoftQuantumMeasurementMultiM.Apply(qubits);
#line 46 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Measurement is {0}", result));
#line 48 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(qubits);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(qubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
            this.MicrosoftQuantumMeasurementMultiM = this.Factory.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<MultiGateQ, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs", OperationFunctor.Body, 54, 72)]
    public partial class HalfAdder : Operation<QVoid, QVoid>, ICallable
    {
        public HalfAdder(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "HalfAdder";
        String ICallable.FullName => "Qsharp.HalfAdder";
        public static OperationInfo<QVoid, QVoid> Info => new OperationInfo<QVoid, QVoid>(typeof(HalfAdder));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit,Qubit)> MicrosoftQuantumIntrinsicCCNOT
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> MicrosoftQuantumMeasurementMultiM
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line 55 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
            MicrosoftQuantumIntrinsicMessage.Apply("Hello quantum world!");
#line hidden
            {
#line 57 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                var qubits = Allocate.Apply(3L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 60 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicCCNOT.Apply((qubits[0L], qubits[1L], qubits[2L]));
#line 61 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicCNOT.Apply((qubits[0L], qubits[1L]));
#line 62 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    var result = (IQArray<Result>)MicrosoftQuantumMeasurementMultiM.Apply(qubits);
#line 63 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Measurement is {0}", result));
#line 65 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(qubits);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(qubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicCCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CCNOT));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
            this.MicrosoftQuantumMeasurementMultiM = this.Factory.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<HalfAdder, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs", OperationFunctor.Body, 72, 116)]
    public partial class Deutsch : Operation<String, QVoid>, ICallable
    {
        public Deutsch(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Deutsch";
        String ICallable.FullName => "Qsharp.Deutsch";
        public static OperationInfo<String, QVoid> Info => new OperationInfo<String, QVoid>(typeof(Deutsch));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        public override Func<String, QVoid> Body => (__in__) =>
        {
            var i = __in__;
#line hidden
            {
#line 74 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                var q = Allocate.Apply(2L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 76 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(q[1L]);
#line 78 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicH.Apply(q[0L]);
#line 79 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicH.Apply(q[1L]);
#line 81 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    if ((i == "0"))
                    {
                    }
                    else if ((i == "1"))
                    {
#line 87 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(q[1L]);
                    }
                    else if ((i == "2"))
                    {
#line 91 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Apply((q[0L], q[1L]));
                    }
                    else
                    {
#line 94 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Apply((q[0L], q[1L]));
#line 94 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(q[1L]);
                    }

#line 100 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicH.Apply(q[0L]);
#line 102 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    var result = MicrosoftQuantumIntrinsicM.Apply(q[0L]);
#line 103 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    if ((result == Result.Zero))
                    {
#line 104 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply("Function is Constant");
                    }
                    else
                    {
#line 106 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply("Function is Balanced");
                    }

#line 108 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(q);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(q);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __dataIn(String data) => new QTuple<String>(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, String i)
        {
            return __m__.Run<Deutsch, String, QVoid>(i);
        }
    }

    [SourceLocation("/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs", OperationFunctor.Body, 116, 165)]
    public partial class Deutsch_Jozsa : Operation<String, QVoid>, ICallable
    {
        public Deutsch_Jozsa(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Deutsch_Jozsa";
        String ICallable.FullName => "Qsharp.Deutsch_Jozsa";
        public static OperationInfo<String, QVoid> Info => new OperationInfo<String, QVoid>(typeof(Deutsch_Jozsa));
        protected ICallable MicrosoftQuantumCanonApplyToEach
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, Int64> MicrosoftQuantumConvertResultArrayAsInt
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> MicrosoftQuantumMeasurementMultiM
        {
            get;
            set;
        }

        public override Func<String, QVoid> Body => (__in__) =>
        {
            var i = __in__;
#line hidden
            {
#line 118 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                var (inp_q,out_q) = (Allocate.Apply(4L), Allocate.Apply());
#line hidden
                bool __arg1__ = true;
                try
                {
#line 120 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(out_q);
#line 122 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicH, inp_q));
#line 123 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicH.Apply(out_q);
#line 128 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    if ((i == "0"))
                    {
                    }
                    else if ((i == "1"))
                    {
#line 134 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(out_q);
                    }
                    else if ((i == "2"))
                    {
#line 138 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Apply((inp_q[0L], out_q));
                    }
                    else
                    {
#line 141 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicCNOT.Apply((inp_q[0L], out_q));
#line 141 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(out_q);
                    }

#line 145 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicH, inp_q));
#line 149 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    var result = (IQArray<Result>)MicrosoftQuantumMeasurementMultiM.Apply(inp_q);
#line 150 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    var ans = MicrosoftQuantumConvertResultArrayAsInt.Apply(result);
#line 152 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    if ((ans == 0L))
                    {
#line 153 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply("Function is Constant");
                    }
                    else
                    {
#line 155 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply("Function is Balanced");
                    }

#line 157 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(inp_q);
#line 158 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicReset.Apply(out_q);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(inp_q);
#line hidden
                        Release.Apply(out_q);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumCanonApplyToEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Canon.ApplyToEach<>));
            this.MicrosoftQuantumConvertResultArrayAsInt = this.Factory.Get<ICallable<IQArray<Result>, Int64>>(typeof(Microsoft.Quantum.Convert.ResultArrayAsInt));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumMeasurementMultiM = this.Factory.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __dataIn(String data) => new QTuple<String>(data);
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, String i)
        {
            return __m__.Run<Deutsch_Jozsa, String, QVoid>(i);
        }
    }

    [SourceLocation("/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs", OperationFunctor.Body, 165, 211)]
    public partial class Simon : Operation<QVoid, QVoid>, ICallable
    {
        public Simon(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Simon";
        String ICallable.FullName => "Qsharp.Simon";
        public static OperationInfo<QVoid, QVoid> Info => new OperationInfo<QVoid, QVoid>(typeof(Simon));
        protected Allocate Allocate
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> MicrosoftQuantumMeasurementMultiM
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line hidden
            {
#line 167 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                var (x,y) = (Allocate.Apply(2L), Allocate.Apply(2L));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 169 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    foreach (var i in new QRange(0L, 5L))
#line hidden
                    {
#line 173 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[0L]);
#line 174 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[1L]);
#line 175 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Controlled.Apply((x, y[0L]));
#line 176 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[0L]);
#line 177 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[1L]);
#line 179 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[0L]);
#line 181 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Controlled.Apply((x, y[0L]));
#line 182 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[0L]);
#line 188 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[1L]);
#line 189 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Controlled.Apply((x, y[1L]));
#line 191 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[1L]);
#line 194 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Controlled.Apply((x, y[1L]));
#line 196 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        var y_res = (IQArray<Result>)MicrosoftQuantumMeasurementMultiM.Apply(y);
#line 197 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        var x_res = (IQArray<Result>)MicrosoftQuantumMeasurementMultiM.Apply(x);
#line 199 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Result is {0}", y_res));
#line 201 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicResetAll.Apply(x);
#line 202 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicResetAll.Apply(y);
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(x);
#line hidden
                        Release.Apply(y);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumMeasurementMultiM = this.Factory.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Simon, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs", OperationFunctor.Body, 211, -1)]
    public partial class Grover : Operation<QVoid, QVoid>, ICallable
    {
        public Grover(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Grover";
        String ICallable.FullName => "Qsharp.Grover";
        public static OperationInfo<QVoid, QVoid> Info => new OperationInfo<QVoid, QVoid>(typeof(Grover));
        protected ICallable MicrosoftQuantumCanonApplyToEach
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumDiagnosticsDumpRegister
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> MicrosoftQuantumIntrinsicReset
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicX
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> MicrosoftQuantumMeasurementMultiM
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line hidden
            {
#line 213 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                var (x,y,z) = (Allocate.Apply(4L), Allocate.Apply(), Allocate.Apply(4L));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 217 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicH, x));
#line 218 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicX.Apply(y);
#line 219 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicH.Apply(y);
#line 220 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    foreach (var i in new QRange(0L, 8L))
#line hidden
                    {
#line 225 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[0L]);
#line 226 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[2L]);
#line 227 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Controlled.Apply((x, y));
#line 228 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[0L]);
#line 229 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[2L]);
#line 232 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicH, x));
#line 233 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[0L]);
#line 234 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[1L]);
#line 235 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[2L]);
#line 236 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[3L]);
#line 238 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Controlled.Apply((x, y));
#line 239 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[0L]);
#line 240 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[1L]);
#line 241 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[2L]);
#line 242 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumIntrinsicX.Apply(x[3L]);
#line 243 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumCanonApplyToEach.Apply((MicrosoftQuantumIntrinsicH, x));
#line 245 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                        MicrosoftQuantumDiagnosticsDumpRegister.Apply((QVoid.Instance, x));
                    }

#line 248 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    var x_res = (IQArray<Result>)MicrosoftQuantumMeasurementMultiM.Apply(x);
#line 251 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Result is {0}", x_res));
#line 253 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(x);
#line 254 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicResetAll.Apply(z);
#line 255 "/home/gopi/qml/MSFT_workshop_QC/Qsharp/Program.qs"
                    MicrosoftQuantumIntrinsicReset.Apply(y);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release.Apply(x);
#line hidden
                        Release.Apply(y);
#line hidden
                        Release.Apply(z);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumCanonApplyToEach = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Canon.ApplyToEach<>));
            this.MicrosoftQuantumDiagnosticsDumpRegister = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Diagnostics.DumpRegister<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicReset = this.Factory.Get<ICallable<Qubit, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Reset));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
            this.MicrosoftQuantumIntrinsicX = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.X));
            this.MicrosoftQuantumMeasurementMultiM = this.Factory.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Grover, QVoid, QVoid>(QVoid.Instance);
        }
    }
}